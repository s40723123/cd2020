<h1>About</h1>
<p>此內容管理系統以 <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作.</p>
<h4>利用 cmsimde 建立靜態網誌方法:</h4>
<p>1. 在 github 建立倉儲, git clone 到近端</p>
<p>2. 參考 <a href="https://github.com/mdecourse/newcms">https://github.com/mdecourse/newcms</a>, 加入除了 cmsimde 目錄外的所有內容</p>
<p>以 git submodule add <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> cmsimde</p>
<p>建立 cmsimde 目錄, 並從 github 取下子模組內容.</p>
<p>3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器.</p>
<p>動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端.</p>
<p>4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行:</p>
<p>git clone --recurse-submodules <a href="https://github.com/mdecourse/newcms.git">https://github.com/mdecourse/newcms.git</a></p>
<h1>Develop</h1>
<p><a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443 就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容.</p>
<p>cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版.</p>
<p>init.py 位於  up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數.</p>
<h1>Python更新</h1>
<p>驗證影片<br/><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/JPD6v553Fso" width="560"></iframe></p>
<p>1.先下載python3.8.2版</p>
<p>2.安裝時先創建資料p382夾並選擇該資料夾</p>
<p>3.安裝時將pip選項取消勾選</p>
<p>4.將資料取代就資料夾</p>
<p>5.將啟動當內舊的路徑改成新的p382</p>
<p>6.安裝pip工具及完成</p>
<h1>直播討論紀錄</h1>
<h2>W2工作分配</h2>
<p><br/><br/><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/JXUKf0cfJcc" width="560"></iframe></p>
<h2>W3小組討論工作方向</h2>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/QTfPD5bpeKc" width="560"></iframe></p>
<h2>W5討論</h2>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/ElNea4b1dX8" width="560"></iframe></p>
<p>討論內容</p>
<p>Webots toutorials 工作分配</p>
<p>未來作業討論</p>
<h1>亂數分組</h1>
<p><span>要使用到隨機亂數抽取的功能就要使用到random套件</span></p>
<p><span>在已知的數字清單中亂數抽取一個數字</span></p>
<p><span>import random</span></p>
<p><span>x=random.choice([1,3,5,7,9])</span></p>
<p><span>print(x)</span></p>
<p><span>&gt;&gt;1</span></p>
<p><span>在已知的數字清單中亂數抽取兩個數字當作樣本</span></p>
<p><span>import random</span></p>
<p><span>y=random.sample([1,3,5,7,9],2)</span></p>
<p><span>print(y)</span></p>
<p><span>&gt;&gt;[9,1]</span></p>
<p><span>將一組清單內的數字順序隨機調換</span></p>
<p><span>import random</span></p>
<p><span>data=[1,3,5,7,9]</span></p>
<p><span>z=random.shuffle(data)</span></p>
<p><span>print(data)</span></p>
<p><span>&gt;&gt;[3,7,1,5,9]</span></p>
<p><span>隨機取得介於0~1之前的數字</span></p>
<p><span>import random</span></p>
<p><span>t=random.random()</span></p>
<p><span>print(t)</span></p>
<p><span>&gt;&gt;0.8883405366359395</span></p>
<p><span>隨機取得介於指定數字間的非整數數字</span></p>
<p><span>import random</span></p>
<p><span>c=random.uniform(0.0,20.0)</span></p>
<p><span>print(c)</span></p>
<p><span>&gt;&gt;16.102</span></p>
<p><span>常態分配亂數，random.normalvariate(平均值,標準差)</span></p>
<p><span>import random</span></p>
<p><span>v=random.normalvariate(100,10)</span></p>
<p><span>print(v)</span></p>
<p><span>&gt;&gt;114.04193052665073</span></p><h1>Webots翻譯及心得</h1>
<h2>傳感器</h2>
<p></p>
<h3>相機傳感器</h3>
<p>對於大多數應用程序而言，添加通用的Camera節點就足夠了。 通用相機是可自定義的（分辨率，視野，噪點等），默認情況下包括變焦和聚焦機制。 提供特殊效果，例如運動模糊，各種噪聲模型，鏡頭畸變和使用球形投影。除了添加通用的Camera節點外，Webot中還提供了一些預定義的Camera模型。</p>
<p><strong>智能相機</strong></p>
<p>如果將“識別”節點添加到相機，則相機不僅可以返回圖像，而且還可以返回相機圖像中檢測到的所有對象及其大小和位置。 因此，模擬像是Mobileye之類的智能相機非常容易。</p>
<p><img alt="smart_camera.png" src="https://raw.githubusercontent.com/cyberbotics/webots/master/docs/guide/images/sensors/smart_camera.png"/></p>
<p><strong>MultiSense S21</strong></p>
<p>MultiSense S21是基於立體相機的距離傳感器。我們的傳感器模型包括多個Webots設備。內部的IntertialUnit設備用於獲取設備的側傾角，俯仰角和偏航角。 可以使用Webots相機獨立檢索立體相機的左右RGB圖像。 或者，可以在MultiSense S21設備的中央啟用RGB相機和RangeFinder設備。 存在這兩個“元”設備以模仿由真實設備生成的3D彩色點的雲。</p>
<p>可以使用下表從MultiSenseS21.name字段計算用於從控制器檢索設備的內部設備名稱：</p>
<p><img alt="" height="529" src="/images/1586269302004.jpg" width="398"/></p>
<p><img alt="multisense_s21.png" src="https://raw.githubusercontent.com/cyberbotics/webots/master/docs/guide/images/sensors/multisense_s21.thumbnail.png"/></p>
<p><img alt="" height="365" src="/images/1586269413764.jpg" width="477"/></p>
<p>名稱字段定義MultiSenseS21名稱，並用於計算內部設備名稱（請參閱此表）。</p>
<p>cameraWidth和cameraHeight字段指定所有內部渲染設備（即Cameras和RangeFinder）的分辨率。</p>
<p>cameraFieldOfView字段指定所有內部渲染設備的水平視場。</p>
<p>cameraNoise字段指定所有內部渲染設備的噪聲（請參閱Camera.noise）。</p>
<p>rangeFinderNoise字段指定內部元RangeFinder的噪聲（請參閱RangeFinder.noise）。</p>
<p>rangeFinderMaxRange字段指定內部元RangeFinder的最大範圍（請參閱RangeFinder.maxRange）。</p>
<p>leftCamera，rightCamera，metaCamera和metaRangeFinder字段允許啟用相應的內部渲染設備。</p>
<p>enablePhysics字段指定傳感器是否應該受到物理影響（質量= 1.5 [kg]）。</p>
<p></p>
<h3>距離傳感器</h3>
<p>對於大多數應用程序而言，添加通用的DistanceSensor節點就足夠了，因為它們是可自定義的（分辨率，lookupTable，光圈等）。此外，Webot中提供了一些預定義的商業化模型，例如某些紅外傳感器。</p>
<p><strong>Sharp GP2D120</strong></p>
<p><img alt="sharp_GP2D120.png" src="https://raw.githubusercontent.com/cyberbotics/webots/master/docs/guide/images/sensors/sharp_GP2D120.png"/></p>
<p>Sharp GP2D120是一款具有集成信號處理和模擬電壓輸出的測距傳感器。 該設備輸出與檢測距離相對應的電壓。該型號具有以下規格：</p>
<p>有效範圍：<span>4 to 30 [cm]</span></p>
<p>輸出類型：類比</p>
<p>響應時間：39 [ms]</p>
<p>啟動延遲：44 [ms]</p>
<p>平均消耗：33 [mA]</p>
<p>原型SharpGP2D120 {<br/>   SFVec3f轉換0 0 0<br/>   旋轉旋轉0 1 0 0<br/>   SFString名稱“夏普的紅外傳感器GP2D120”<br/>   SFString模型“ GP2D120”</p>
<p>根據數據表中的特徵，DistanceSensor的lookupTable字段已經實現。</p>
<p>wb_distance_sensor_get_value函數返回測量的電壓/強度。 要轉換這些值，請使用以下公式：</p>
<ul>
<li>Convert meters to voltage:<span> </span><code>y(x) = 0.5131*x^(-0.5735)-0.6143</code></li>
<li>Convert voltage to meters:<span> </span><code>y(x) = 0.1594*x^(-0.8533)-0.02916</code></li>
</ul>
<p><strong>Sharp GP2Y0A02YK0F</strong></p>
<p><strong><img alt="sharp_GP2Y0A02YK0F.png" src="https://raw.githubusercontent.com/cyberbotics/webots/master/docs/guide/images/sensors/sharp_GP2Y0A02YK0F.png"/></strong></p>
<p>Sharp GP2Y0A02YK0F是一種測距傳感器單元，由PSD（位置敏感檢測器），IR-LED（紅外發光二極管）和信號處理電路的集成組合組成。 由於採用三角測量法，物體的反射率，環境溫度和工作持續時間的變化不容易影響距離檢測。 該設備輸出與檢測距離相對應的電壓。 因此，該傳感器也可以用作接近傳感器。</p>
<p>該型號具有以下規格：</p>
<p>有效範圍：20至150 [cm]</p>
<p>輸出類型：類比</p>
<p>響應時間：33 [ms]</p>
<p>啟動延遲：50 [ms]</p>
<p>平均消耗：33 [mA]</p>
<p>原型SharpGP2Y0A02YK0F {<br/>   SFVec3f轉換0 0 0<br/>   旋轉旋轉0 1 0 0<br/>   SFString名稱“夏普的紅外傳感器GP2Y0A02YK0F”</p>
<p>根據數據表中的特徵，DistanceSensor的lookupTable字段已經實現。wb_distance_sensor_get_value函數返回測量的電壓/強度。 要轉換這些值，請使用以下公式：</p>
<ul>
<li>Convert meters to voltage:<span> </span><code>y(x) = 1.784*x^(-0.4215)-1.11</code></li>
<li>Convert voltage to meters:<span> </span><code>y(x) = 0.7611*x^(-0.9313)-0.1252</code></li>
</ul>
<p><strong>Sharp GP2Y0A41SK0F</strong></p>
<p><strong><img alt="sharp_GP2Y0A41SK0F.png" src="https://raw.githubusercontent.com/cyberbotics/webots/master/docs/guide/images/sensors/sharp_GP2Y0A41SK0F.png"/></strong></p>
<p>Sharp GP2Y0A41SK0F是一種測距傳感器單元，由PSD（位置敏感檢測器），IR-LED（紅外發光二極管）和信號處理電路的集成組合組成。 由於採用三角測量法，物體的反射率，環境溫度和工作持續時間的變化不容易影響距離檢測。 該設備輸出與檢測距離相對應的電壓。 因此，該傳感器也可以用作接近傳感器。</p>
<p>該型號具有以下規格：</p>
<p>有效範圍：4到30 [cm]<br/>輸出類型：類比<br/>響應時間：16.5 [ms]<br/>啟動延遲：26 [ms]<br/>平均消耗：12 [mA]</p>
<p><span>原型SharpGP2Y0A41SK0F {<br/>   SFVec3f轉換0 0 0<br/>   旋轉旋轉0 1 0 0<br/>   SFString名稱“夏普的紅外傳感器GP2Y0A41SK0F”<br/></span></p>
<p>根據數據表中的特徵，DistanceSensor的lookupTable字段已經實現。wb_distance_sensor_get_value函數返回測量的電壓/強度。 要轉換這些值，請使用以下公式：</p>
<ul>
<li>Convert meters to voltage:<span> </span><code>y(x) = 0.5131*x^(-0.5735)-0.6143</code></li>
<li>Convert voltage to meters:<span> </span><code>y(x) = 0.1594*x^(-0.8533)-0.02916</code><code></code></li>
</ul>